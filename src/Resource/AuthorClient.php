<?php

declare(strict_types=1);

namespace DvidsApi\Resource;

use DvidsApi\DvidsApiClient;
use DvidsApi\Model\Author;

/**
 * Client for managing author resources
 */
readonly class AuthorClient
{
    public function __construct(
        private DvidsApiClient $client
    ) {
    }

    /**
     * Get a list of available authors with paging and filtering
     *
     * @param array $filters Filters for the search (name, first_name, last_name, vision_id, branch)
     * @param int $page Page number of results
     * @param int $limit Limit of results per page
     * @return array{data: Author[], links: array} Paginated list of authors
     */
    public function getAuthors(array $filters = [], int $page = 1, int $limit = 50): array
    {
        $queryParams = array_merge($filters, [
            'page' => $page,
            'limit' => $limit
        ]);

        $response = $this->client->get('/author', $queryParams);

        $authors = [];
        if (isset($response['data']) && is_array($response['data'])) {
            foreach ($response['data'] as $authorData) {
                $authors[] = Author::fromArray($authorData);
            }
        }

        return [
            'data' => $authors,
            'links' => $response['links'] ?? []
        ];
    }

    /**
     * Get an author by ID
     */
    public function getAuthor(string $id): Author
    {
        $response = $this->client->get("/author/{$id}");
        
        if (!isset($response['data'])) {
            throw new \InvalidArgumentException('Invalid author response format');
        }

        return Author::fromArray($response['data']);
    }

    /**
     * Search authors by name (first or last name)
     */
    public function searchByName(string $name, int $page = 1, int $limit = 50): array
    {
        return $this->getAuthors(['name' => $name], $page, $limit);
    }

    /**
     * Search authors by first name
     */
    public function searchByFirstName(string $firstName, int $page = 1, int $limit = 50): array
    {
        return $this->getAuthors(['first_name' => $firstName], $page, $limit);
    }

    /**
     * Search authors by last name
     */
    public function searchByLastName(string $lastName, int $page = 1, int $limit = 50): array
    {
        return $this->getAuthors(['last_name' => $lastName], $page, $limit);
    }

    /**
     * Find author by vision ID (exact match)
     */
    public function findByVisionId(string $visionId): array
    {
        return $this->getAuthors(['vision_id' => $visionId]);
    }

    /**
     * Filter authors by branch
     */
    public function filterByBranch(string $branch, int $page = 1, int $limit = 50): array
    {
        return $this->getAuthors(['branch' => $branch], $page, $limit);
    }

    /**
     * Create a VIRIN for an author
     */
    public function createVirin(string $authorId, \DateTimeInterface $date): array
    {
        $data = [
            'data' => [
                'id' => '', // This will be generated by the API
                'type' => 'author-virin',
                'attributes' => [
                    'date' => $date->format('c')
                ],
                'relationships' => [
                    'author' => [
                        'data' => [
                            'id' => $authorId,
                            'type' => 'author'
                        ]
                    ]
                ]
            ]
        ];

        return $this->client->post("/author/{$authorId}/virin", $data);
    }
}