<?php

declare(strict_types=1);

namespace DvidsApi\Resource;

use DvidsApi\DvidsApiClient;
use DvidsApi\Model\Graphic;

/**
 * Client for managing graphic resources
 */
readonly class GraphicClient
{
    public function __construct(
        private DvidsApiClient $client
    ) {
    }

    /**
     * Get a list of graphic categories with paging
     *
     * @param int $page Page number of results
     * @param int $limit Limit of results per page
     * @return array Paginated list of graphic categories
     */
    public function getGraphicCategories(int $page = 1, int $limit = 50): array
    {
        $queryParams = [
            'page' => $page,
            'limit' => $limit
        ];

        return $this->client->get('/graphic-category', $queryParams);
    }

    /**
     * Create a new graphic in a batch
     *
     * @param string $batchId Batch ID to create the graphic in
     * @param array $graphicData Graphic data following the API schema
     * @return Graphic Created graphic object
     */
    public function createBatchGraphic(string $batchId, array $graphicData): Graphic
    {
        $response = $this->client->post("/batch/{$batchId}/graphic", ['data' => $graphicData]);
        
        if (!isset($response['data'])) {
            throw new \InvalidArgumentException('Invalid graphic response format');
        }

        return Graphic::fromArray($response['data']);
    }

    /**
     * Get a graphic by ID from a batch
     *
     * @param string $batchId Batch ID
     * @param string $graphicId Graphic ID
     * @return Graphic Graphic object
     */
    public function getBatchGraphic(string $batchId, string $graphicId): Graphic
    {
        $response = $this->client->get("/batch/{$batchId}/graphic/{$graphicId}");
        
        if (!isset($response['data'])) {
            throw new \InvalidArgumentException('Invalid graphic response format');
        }

        return Graphic::fromArray($response['data']);
    }

    /**
     * Update a graphic in a batch
     *
     * @param string $batchId Batch ID
     * @param string $graphicId Graphic ID
     * @param array $graphicData Updated graphic data
     * @return Graphic Updated graphic object
     */
    public function updateBatchGraphic(string $batchId, string $graphicId, array $graphicData): Graphic
    {
        $response = $this->client->put("/batch/{$batchId}/graphic/{$graphicId}", ['data' => $graphicData]);
        
        if (!isset($response['data'])) {
            throw new \InvalidArgumentException('Invalid graphic response format');
        }

        return Graphic::fromArray($response['data']);
    }

    /**
     * Delete a graphic from a batch
     *
     * @param string $batchId Batch ID
     * @param string $graphicId Graphic ID
     * @return bool True if deleted successfully
     */
    public function deleteBatchGraphic(string $batchId, string $graphicId): bool
    {
        $this->client->delete("/batch/{$batchId}/graphic/{$graphicId}");
        return true;
    }

    /**
     * Create a graphic with simplified parameters
     *
     * @param string $batchId Batch ID
     * @param string $title Headline to introduce graphic
     * @param string $description Longer description of the graphic
     * @param string $instructions Instructions for release authority and review handling
     * @param \DateTimeInterface $createdAt When the graphic was created
     * @param string $virin Visual imagery record identification number
     * @param string $country ISO-3166-2 country code where graphic was created
     * @param string $batchUploadId ID of the completed batch upload
     * @param string $categoryId Graphic category ID
     * @param string $serviceUnitId Service unit ID
     * @param array $tags Array of tag strings
     * @param string|null $subdiv State/province where graphic was created
     * @param string|null $city City where graphic was created
     * @param string|null $captionWriter Name of individual who captioned the graphic
     * @param array $authorIds Array of author IDs to credit
     * @param array $themeIds Array of theme IDs to associate
     * @return Graphic Created graphic object
     */
    public function createSimpleGraphic(
        string $batchId,
        string $title,
        string $description,
        string $instructions,
        \DateTimeInterface $createdAt,
        string $virin,
        string $country,
        string $batchUploadId,
        string $categoryId,
        string $serviceUnitId,
        array $tags = [],
        ?string $subdiv = null,
        ?string $city = null,
        ?string $captionWriter = null,
        array $authorIds = [],
        array $themeIds = []
    ): Graphic {
        $graphicData = [
            'id' => '', // Will be generated by API
            'type' => 'graphic',
            'attributes' => [
                'title' => $title,
                'description' => $description,
                'instructions' => $instructions,
                'created_at' => $createdAt->format('c'),
                'virin' => $virin,
                'country' => $country,
                'tags' => $tags
            ],
            'relationships' => [
                'batch_upload' => [
                    'data' => [
                        'id' => $batchUploadId,
                        'type' => 'batch-upload'
                    ]
                ],
                'category' => [
                    'data' => [
                        'id' => $categoryId,
                        'type' => 'graphic-category'
                    ]
                ],
                'service_unit' => [
                    'data' => [
                        'id' => $serviceUnitId,
                        'type' => 'service-unit'
                    ]
                ]
            ]
        ];

        // Add optional attributes
        if ($subdiv !== null) {
            $graphicData['attributes']['subdiv'] = $subdiv;
        }
        
        if ($city !== null) {
            $graphicData['attributes']['city'] = $city;
        }
        
        if ($captionWriter !== null) {
            $graphicData['attributes']['caption_writer'] = $captionWriter;
        }

        // Add optional relationships
        if (!empty($authorIds)) {
            $graphicData['relationships']['authors'] = [
                'data' => array_map(fn(string $id): array => [
                    'id' => $id,
                    'type' => 'author'
                ], $authorIds)
            ];
        }

        if (!empty($themeIds)) {
            $graphicData['relationships']['themes'] = [
                'data' => array_map(fn(string $id): array => [
                    'id' => $id,
                    'type' => 'theme'
                ], $themeIds)
            ];
        }

        return $this->createBatchGraphic($batchId, $graphicData);
    }
}